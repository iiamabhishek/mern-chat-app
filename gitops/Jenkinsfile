pipeline {
    agent any

    environment {
        DOCKER_USER = 'iiamabhishek05'
        AWS_DEFAULT_REGION = 'ap-south-1'
        TF_CHANGES = "false"
        TF_DIR = 'terraform'
        // ENV_NAME = 'prod'
        // TF_VAR_environment = "${ENV_NAME}"
        // TF_VAR_app_version = "${params.PARENT_BUILD_NUMBER}"
        // TF_VAR_aws_region = "${AWS_DEFAULT_REGION}"
        // TF_VAR_cluster_name = 'mern-cluster'
    }

    stages {

        stage('Clean the Workspace') {
            steps {
                cleanWs()        
            }
        }

        stage('Clone Repository') {
            steps {
                git branch: 'master',
                url: 'https://github.com/iiamabhishek/mern-chat-app.git',
                credentialsId: 'github'
            }
        }

        stage('Verify Parameters') {
            steps {
                script {
                    if (!params.PARENT_BUILD_NUMBER) {
                        error "PARENT_BUILD_NUMBER parameter is missing!"
                    } else {
                        echo "✅ Received PARENT_BUILD_NUMBER: ${params.PARENT_BUILD_NUMBER}"
                    }
                }
            }
        }

        stage('Update Kubernetes Image Tags') {
            steps {
                script {
                    dir('kubernetes') {
                        def tag = params.PARENT_BUILD_NUMBER

                        // Update backend image tag
                        sh "sed -i 's|iiamabhishek05/mern-app-backend:.*|iiamabhishek05/mern-app-backend:v${tag}|' backend-deployment.yaml"

                        // Update frontend image tag
                        sh "sed -i 's|iiamabhishek05/mern-app-frontend:.*|iiamabhishek05/mern-app-frontend:v${tag}|' frontend-deployment.yaml"

                        echo "✅ Image tags updated to v${tag}"
                    }
                }
            }
        }

        stage('Push Updated Kubernetes Manifests to GitHub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'github', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                        sh """
                            git config user.name "${GIT_USERNAME}"
                            git config user.email "${GIT_USERNAME}@users.noreply.github.com"

                            git pull https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/iiamabhishek/mern-chat-app.git master

                            git add *.yaml

                            # Check if there are any staged changes
                            if ! git diff --cached --quiet; then
                                git commit -m "Update Kubernetes image tags to v${params.PARENT_BUILD_NUMBER}"
                                git push https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/iiamabhishek/mern-chat-app.git HEAD:master
                                echo "✅ Changes committed and pushed!"
                            else
                                echo "ℹ️ No changes to push."
                            fi
                        """
                    }
                }
            }
        }

        stage('Terraform Init & Validate') {
            steps {
                dir("${TF_DIR}") {
                    sh 'rm -rf .terraform terraform.tfstate* tfplan'
                    sh 'terraform init -backend=true -input=false -no-color'
                    sh 'terraform validate'
                }
            }
        }


        stage('Terraform Plan') {
            steps {
                dir("${TF_DIR}") {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-creds']]) {
                        sh 'terraform plan -out=tfplan'
                        archiveArtifacts artifacts: 'tfplan', fingerprint: true
                    }
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                dir("${TF_DIR}") {
                    script {
                        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding',credentialsId: 'aws-creds',accessKeyVariable: 'AWS_ACCESS_KEY_ID',secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                            timeout(time: 15, unit: 'MINUTES') {
                                def approval = input(
                                    message: 'Apply Terraform changes?',
                                    parameters: [
                                        string(name: 'Justification', description: 'Why are we applying this?')
                                    ]
                                )
                                echo "Approved by reason: ${approval}"
                                sh 'terraform apply -auto-approve tfplan'
                            }
                        }
                    }
                }
            }
        }
    
        

        
    

        // stage('Post Apply Audit') {
        //     when {
        //         expression { env.TF_CHANGES == "true" }
        //     }
        //     steps {
        //         dir('terraform') {
        //             script {
        //                 // Save state and resource summary
        //                 sh '''
        //                     terraform show -json > tfstate.json
        //                     terraform state list > resource-list.txt
        //                 '''

        //                 // Archive for audit/tracking
        //                 archiveArtifacts artifacts: 'tfstate.json, resource-list.txt', fingerprint: true

        //                 // Optional: Print summary
        //                 echo "✅ Terraform resources applied:"
        //                 sh 'cat resource-list.txt'
        //             }
        //         }
        //     }
        // }

        // stage('Backup Kubernetes Resources') {
        //     steps {
        //         withKubeConfig([credentialsId: 'kubeconfig']) {
        //             sh '''
        //                 mkdir -p kube_backup
        //                 kubectl get all -o yaml > kube_backup/kubernetes-backup-$(date +%F-%H-%M).yaml
        //                 echo "✅ Kubernetes backup created!"
        //             '''
        //         }
        //     }
        // }

        // stage('Apply Kubernetes Manifests') {
        //     steps {
        //         script {
        //             dir('kubernetes') {
        //                 withKubeConfig([credentialsId: 'kubeconfig']) {
        //                     sh '''
        //                         kubectl get pod
        //                         kubectl apply -f .
                                
        //                         echo "✅ Kubernetes Menifest File applied successfully!"
        //                     '''
        //                 }
        //             }
        //         }
        //     }
        // }

        // stage('Docker Cleanup local images') {
        //     steps {
        //         sh """
        //             docker rmi $DOCKER_USER/mern-app-frontend:v${params.PARENT_BUILD_NUMBER}
        //             docker rmi $DOCKER_USER/mern-app-backend:v${params.PARENT_BUILD_NUMBER}
        //         """
        //     }
        // }
    }
    // post {
    //     always {
    //         dir('terraform') {
    //             script {
    //                 sh 'rm -f tfplan || true'
    //                 sh 'terraform output -json > outputs.json'
    //                 archiveArtifacts artifacts: 'outputs.json'
    //             }
    //         }
    //     }
    //     failure {
    //         script {
    //             emailext body: 'Terraform deployment failed. Build URL: ${BUILD_URL}',
    //                     subject: 'FAILED: ${JOB_NAME}',
    //                     to: 'devops@example.com'
    //         }
    //     }
    // }
}